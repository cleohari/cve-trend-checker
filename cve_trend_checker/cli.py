#   Copyright (C) 2022 MIT
#   Author: Kha Tran
#   Title: Fresher Software Engineer


#   This file is currently developing to be run directly
#   Until setup.py has been coded, This still be run directly


"""
    This tool will takes a report file from Dependency Check
    (a cve scanning plugin on Jenkins) and start get each CVEs info
    from NVD and Redhat and then analyzing with CVE data crawling
    from Twitter and Darkweb
"""


import argparse
import logging
import os
import platform
import sys
import textwrap

from collections import ChainMap

from date import get_cur_date
from db import DB
from error import ErrorHandler, ErrorMode
from log import LOGGER
from version import VERSION


def main(argv=None):
    """
        Command Line Interface for cve-trend-checker
    """

    argv = argv or sys.argv

    #   Reset logger level to info
    LOGGER.setLevel(logging.INFO)

    #   Setup the arguments parser
    parser = argparse.ArgumentParser(
        prog="cve-trend-checker",
        description=textwrap.dedent(
            """
                The cve-trend-checker will takes a report file from Dependency Check
                (a cve scanning plugin on Jenkins) and start get each CVEs info
                from NVD and Redhat and then analyzing with CVE data crawling
                from Twitter and Darkweb             
            """
        ),
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "-f",
        "--file",
        action="store",
        help="File CVE report from whichever tools as long as it's in csv format"
    )
    parser.add_argument(
        "-n",
        "--name",
        action="store",
        help="A given name for a service with that report"
    )

    plot_group = parser.add_argument_group(
        "Plot and Analyze", "Arguments related to Plot and Analyze"
    )
    plot_group.add_argument(
        "-p",
        "--plot",
        action="store_true",
        help="Plot a service or all services and print out a report to recommend which CVE should be fixed first",
        default=False
    )
    plot_group.add_argument(
        "-t",
        "--track",
        action="store_true",
        help="Track the status of a service and plot a graph",
        default=False
    )
    plot_group.add_argument(
        "-l",
        "--latest",
        action="store_true",
        help="Get the latest CVEs of a service and plot a graph",
        default=False
    )

    with ErrorHandler(mode=ErrorMode.NoTrace):
        raw_args = parser.parse_args(argv[1:])
        args = {key: value for key, value in vars(raw_args).items() if value}
        defaults = {key: parser.get_default(key) for key in vars(raw_args)}

    #   ChainMap the arguments
    args = ChainMap(args, defaults)

    #   CLI configuration
    report_file = ""
    service_name = None
    if args["file"]:
        report_file = args["file"]
        if not args["name"]:
            LOGGER.warning(textwrap.dedent("""
                You must specify the 'name' by adding the '--name/-n'.
                For more information use '--help/-h'.
            """))
            sys.exit(-1)
        service_name = args["name"]

    #   CLI configuration for Plotting
    config = {
        "name": "",
        "track": False,
        "latest": False,
        "keyword": False
    }
    if args["plot"]:
        if not args["name"]:
            LOGGER.warning(textwrap.dedent("""
                usage: cve-trend-checker -p [-n NAME] [-t]
                cve-trend-checker: error: missing -n argument.
            """))
            sys.exit(-1)
        config["name"] = args["name"]
        if args["track"]:
            config["track"] = True
        if args["latest"]:
            config["latest"] = True
        if args["keyword"]:
            config["keyword"] = True

    #   Once logging is set, we can output the version and NVD notice
    LOGGER.info(f"CVE Trend Checker v{VERSION}")
    LOGGER.info(
        "This product uses the NVD and Redhat API but is not endorsed or certified by the NVD and Redhat")

    if platform.system() != "Linux":
        warning_nolinux = """
                            **********************************************
                            Warning: this utility was developed for Linux.
                            You may need to install additional utilities
                            to use it on other operating systems.
                            **********************************************
                          """
        LOGGER.warning(warning_nolinux)

    #   Start initializing the database
    db = DB(report_file=report_file,
            service_name=service_name)

    #   Start checking the database exists
    db.check_db_exists()
    db.process_report_file()

    #   Start plotting
    if args["plot"]:
        db.process_plot_cve(config=config)


if __name__ == "__main__":
    if os.getenv("NO_EXIT_CVE_NUM"):
        main()
    else:
        sys.exit(main())
