#   Copyright (C) 2022 MIT
#   Author: Kha Tran
#   Title: Fresher Software Engineer


"""
    Scanning System source code for CVE Trend Checker
"""
from __future__ import annotations
import asyncio


import aiohttp
import csv
import os
import time

from logging import Logger
from rich.progress import track
from typing import List

from async_p import RateLimiter
from log import LOGGER


INTERVAL_PERIOD: int = 3


class Report:
    """
        Scans system for report file. 
    """

    def __init__(
        self,
        logger: Logger = LOGGER.getChild("Report"),
        report_file: str | None = None,
        service_name: str | None = None,
        session: RateLimiter | None = None,
        interval: int = INTERVAL_PERIOD,
        nvd_api: str | None = None
    ) -> None:
        #   Logging system
        self.logger = logger or LOGGER.getChild(self.__class__.__name__)

        #   System
        self.session = session
        self.interval: int = interval
        self.failed_count: int = 0
        self.nvd_api = nvd_api if nvd_api is not None else ""

        #   Report file
        self.report_file: str = report_file if report_file is not None else ""
        self.service_name: str = report_file if report_file is not None else ""

        #   Data uphold
        self.cve_list = []
        self.all_cve_entries: List = []

    def scan_cve(self):
        #   Scans the report file
        if os.path.exists(self.report_file):
            with open(self.report_file) as f:
                rows = csv.reader(f, delimiter=",")
                line = 0
                for row in rows:
                    if line >= 1:
                        self.cve_list.append(row[10])
                    line += 1

        return self.cve_list

    async def load_nvd_request(self, cve) -> None:
        #   Get each request for each CVE
        fetched_data = None
        while fetched_data is None:
            try:
                url = self.nvd_api.format(cve)
                async with await self.session.get(
                    url,
                    params={},
                    raise_for_status=True
                ) as response:
                    if response.status == 200:
                        fetched_data = await response.json()
                        self.all_cve_entries.extend(
                            fetched_data["result"]["CVE_Items"])
            except Exception as e:
                self.logger.debug(f"Failed to connect to NVD {e}")
                self.logger.debug(
                    f"Pausing requests for {self.interval} seconds")
                self.failed_count += 1
                time.sleep(self.interval)

    async def get(self):
        #   Start fetching to NVD
        nvd_requests = [
            self.load_nvd_request(cve)
            for cve in self.cve_list
        ]

        total_tasks = len(nvd_requests)

        iter_tasks = track(
            asyncio.as_completed(nvd_requests),
            description="Fetches CVEs to NVD:",
            total=total_tasks
        )

        for task in iter_tasks:
            await task
        return self.all_cve_entries
