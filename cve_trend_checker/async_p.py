#   Copyright (C) 2022 MIT
#   Author: Kha Tran
#   Title: Fresher Software Engineer


"""
    Asynchronous System Handler for CVE Trend Checker
"""

import asyncio
import os
import sys
import time

from functools import partial, wraps


def get_event_loop():
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    if sys.platform.startswith("win"):
        if isinstance(loop, asyncio.SelectorEventLoop):
            loop = asyncio.ProactorEventLoop()
            asyncio.set_event_loop(loop)
    return loop


def run_coroutine(coro):
    loop = get_event_loop()
    aws = asyncio.ensure_future(coro, loop=loop)
    result = loop.run_until_complete(aws)
    return result


class RateLimiter:
    """
        Limit the number of request class 
    """

    RATE = 10
    MAX_TOKENS = 10

    def __init__(self, client) -> None:
        self.client = client
        self.tokens = self.MAX_TOKENS
        self.updated_at = time.monotonic()

    async def get(self, *args, **kwargs):
        await self.wait_for_token()
        return self.client.get(*args, **kwargs)

    async def wait_for_token(self):
        while self.tokens < 1:
            self.add_new_tokens()
            await asyncio.sleep(0.1)
        self.tokens -= 1

    def add_new_tokens(self):
        now = time.monotonic()
        time_since_update = now - self.updated_at
        new_tokens = time_since_update * self.RATE
        if self.tokens + new_tokens >= 1:
            self.tokens = min(self.tokens + new_tokens, self.MAX_TOKENS)
            self.updated_at = now

    async def close(self):
        await self.client.close()
