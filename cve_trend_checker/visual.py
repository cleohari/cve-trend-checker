#   Copyright (C) 2022 MIT
#   Author: Kha Tran
#   Title: Fresher Software Engineer


"""
    Visualize System source code by using Matplotlib & Pandas
"""
from __future__ import annotations


#   Pandas: a manipulative module for data
import os
import sys
import pandas as pd
import sqlite3 as lite
import uuid as uid
#   Matplotlib a plotting module for visualization data
import matplotlib.pyplot as plt
import matplotlib.ticker as tick
from log import LOGGER

from date import get_cur_date, get_cur_date_non_iso, get_cur_month_year, get_cur_month
from logging import Logger
from error import ErrorHandler, ErrorMode


class Visual:
    """
        Visual Class: controls and analyzes the CVE data and export a report file. 
    """

    def __init__(
        self,
        con: lite.Connection | None = None,
        plot_style: str = "seaborn-whitegrid",
        height: int = 6,
        width: int = 12,
        logger: Logger = LOGGER.getChild("Visual"),
        imagedir: str = ""
    ) -> None:
        #   Bootstrap the values
        self.con = con
        self.plot_style = plot_style
        self.height = height
        self.width = width
        self.imagedir = imagedir

        #   Logging system
        self.logger = logger or LOGGER.getChild(__class__.__name__)

        #   Configure the matplotlib
        if plot_style in self.get_plot_style():
            self.apply_plot_style()

    def plot_all_found_keywords(self) -> None:
        #   Plot all services in this month
        with ErrorHandler(mode=ErrorMode.NoTrace):
            query = f"""
                SELECT * FROM key
                WHERE scan_date LIKE "%{get_cur_month_year()}%"
            """
            data = pd.read_sql_query(query, con=self.con)

            # Plot with bar graph
            fig, ax = plt.subplots(figsize=(self.width, self.height))
            data.groupby(["scan_date", "key"]).size().groupby(level=0).apply(
                lambda x: 100 * x / x.sum()).to_frame().unstack().plot(kind='bar', stacked=True, legend=False, rot=0, width=0.1, ax=ax)
            current_handles, _ = ax.get_legend_handles_labels()
            reverse_handles = reversed(current_handles)
            correct_labels = reversed(data['key'].unique())

            ax.legend(reverse_handles, correct_labels)
            labels = ax.get_xticklabels()
            reverse_labels = reversed(labels)
            ax.set_xticklabels(reverse_labels)
            ax.set(
                title=f"Found Keywords in {get_cur_month()}", xlabel="Date", ylabel="Percentage")

            #   Construct a PNG name
            picpath = os.path.join(
                self.imagedir, f"visual_keywords_in_{get_cur_month()}.PNG")
            fig.savefig(picpath)

    def plot_latest_a_service(self, service) -> None:
        #   Plot a single service with the latest day
        #   date: current date
        #   service: this service that you've just scanned
        with ErrorHandler(mode=ErrorMode.NoTrace):
            query = f"""
                SELECT c.cve_id, c.score, c.exploitability_score, c.impact_score, COUNT(r.url) AS sources
                FROM cve c, reference r
                WHERE c.cve_id=r.cve_id
                AND c.scan_date LIKE "%{get_cur_date_non_iso()}%"
                GROUP BY c.cve_id
            """
            data = pd.read_sql_query(query, con=self.con)

            #   Plot with bar graph
            fig, ax = plt.subplots(figsize=(self.width, self.height))
            data.plot(kind="bar", rot=0, x="cve_id", ax=ax)
            ax.set(title=f"{service} - {get_cur_date()}",
                   xlabel="CVE", ylabel="Score")

            #   Construct a PNG name
            picpath = os.path.join(
                self.imagedir, f"visual_{service}_{get_cur_date_non_iso()}.PNG")
            fig.savefig(picpath)

        #   Plot statistic graph of founded new cve of this service
        with ErrorHandler(mode=ErrorMode.NoTrace):
            query = f"""
                SELECT COUNT(cve_id) AS numbers, scan_date
                FROM cve
                WHERE service="{service}"
                GROUP BY scan_date
            """
            data = pd.read_sql_query(query, con=self.con)

            #   Plot
            fig, ax = plt.subplots(figsize=(self.width, self.height))
            data.plot(rot=0, x="scan_date", ax=ax)
            ax.set(title=f"{service} - CVE Detected - {get_cur_date_non_iso()}",
                   xlabel="Date", ylabel="CVE Count")

            #   Construct the PNG name
            picpath = os.path.join(
                self.imagedir, f"visual_cve_count_{service}_{get_cur_date_non_iso()}.PNG")
            fig.savefig(picpath)

    def get_plot_style(self) -> list[str]:
        #   Return the available style on matplotlib
        return plt.style.available

    def apply_plot_style(self) -> None:
        #   Apply the plot style
        plt.style.use(self.plot_style)
