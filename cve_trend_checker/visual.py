#   Copyright (C) 2022 MIT
#   Author: Kha Tran
#   Title: Fresher Software Engineer


"""
    Visualize System source code by using Matplotlib & Pandas
"""
from __future__ import annotations


#   Pandas: a manipulative module for data
import os
import sys
import pandas as pd
import sqlite3 as lite
import uuid as uid
#   Matplotlib a plotting module for visualization data
import matplotlib.pyplot as plt
import matplotlib.ticker as tick
from log import LOGGER

from date import get_cur_date, get_cur_date_non_iso, get_cur_month_year, get_cur_month
from logging import Logger
from error import ErrorHandler, ErrorMode


class Visual:
    """
        Visual Class: controls and analyzes the CVE data and export a report file.
    """

    def __init__(
        self,
        con: lite.Connection | None = None,
        plot_style: str = "seaborn-whitegrid",
        height: int = 10,
        width: int = 16,
        fontsize: int = 18,
        fontweight: str = "bold",
        labelsize: int = 16,
        logger: Logger = LOGGER.getChild("Visual"),
        imagedir: str = ""
    ) -> None:
        #   Bootstrap the values
        self.con = con
        self.plot_style = plot_style
        self.height = height
        self.width = width
        self.fontsize = fontsize
        self.fontweight = fontweight
        self.labelsize = labelsize
        self.imagedir = imagedir

        #   Logging system
        self.logger = logger or LOGGER.getChild(__class__.__name__)

        #   Configure the matplotlib
        if plot_style in self.get_plot_style():
            self.apply_plot_style()

    def get_plot_style(self) -> list[str]:
        #   Return the available style on matplotlib
        return plt.style.available

    def apply_plot_style(self) -> None:
        #   Apply the plot style
        plt.style.use(self.plot_style)

    def plot_by_tracking(self, service: str) -> None:
        #   Track the status of a service then plot it
        cur = self.con.cursor()
        old_date_query = """
            SELECT MIN(date) 
            FROM track
        """
        raw_solved_query = """
            SELECT COUNT(cve_id) AS solved_d, date
            FROM track
            WHERE status = "SOLVED"
            GROUP BY date
        """
        unsolved_query = """
            SELECT COUNT(cve_id) AS unsolved_d, date        
            FROM track
            WHERE status = "UNSOLVED"
            GROUP BY date
        """
        old_date = cur.execute(old_date_query).fetchone()
        raw_solved_df = pd.read_sql_query(raw_solved_query, con=self.con)
        base_df = pd.DataFrame({
            "solved_d": [0],
            "date": [old_date]
        })
        solved_df = pd.concat([base_df, raw_solved_df])
        solved_df.reset_index(drop=True, inplace=True)
        unsolved_df = pd.read_sql_query(unsolved_query, con=self.con)

        #   Start plotting
        fig, ax = plt.subplots(figsize=(self.width, self.height))
        solved_df.plot(rot=0, y="solved_d", x="date", ax=ax)
        unsolved_df.plot(rot=0, y="unsolved_d", x="date", ax=ax)
        ax.set_title(f"Track Resolve Status of {service} on {get_cur_date()}",
                     fontsize=18, fontweight="bold")
        ax.tick_params(axis="both", which="major", labelsize=self.labelsize)
        ax.set_xlabel(xlabel="Date", fontsize=self.fontsize,
                      fontweight=self.fontweight)
        ax.set_ylabel(ylabel="Number", fontsize=self.fontsize,
                      fontweight=self.fontweight)
        ax.legend(["Unsolved", "Solved"], prop={"size": self.labelsize})
        fig.savefig(os.path.join(self.imagedir,
                    f"track_{get_cur_date()}_{service}.png"))
