#   Copyright (C) 2022 MIT
#   Author: Kha Tran
#   Title: Fresher Software Engineer


"""
    Visualize System source code by using Matplotlib & Pandas
"""
from __future__ import annotations


#   Pandas: a manipulative module for data
import os
import pandas as pd
import sqlite3 as lite
import uuid as uid
#   Matplotlib a plotting module for visualization data
import matplotlib.pyplot as plt
from log import LOGGER

from date import get_cur_date
from logging import Logger
from error import ErrorHandler, ErrorMode


class Visual:
    """
        Visual Class: controls and analyzes the CVE data and export a report file.
    """

    def __init__(
        self,
        con: lite.Connection | None = None,
        plot_style: str = "seaborn-whitegrid",
        height: int = 10,
        width: int = 16,
        fontsize: int = 18,
        fontweight: str = "bold",
        labelsize: int = 16,
        logger: Logger = LOGGER.getChild("Visual"),
        imagedir: str = "",
        service_name: str = ""
    ) -> None:
        #   Bootstrap the values
        self.con = con
        self.plot_style = plot_style
        self.height = height
        self.width = width
        self.fontsize = fontsize
        self.fontweight = fontweight
        self.labelsize = labelsize
        self.imagedir = imagedir
        self.service_name = service_name

        #   Logging system
        self.logger = logger or LOGGER.getChild(__class__.__name__)

        #   Configure the matplotlib
        if plot_style in self.get_plot_style():
            self.apply_plot_style()

    def get_plot_style(self) -> list[str]:
        #   Return the available style on matplotlib
        return plt.style.available

    def apply_plot_style(self) -> None:
        #   Apply the plot style
        plt.style.use(self.plot_style)

    def plot_by_tracking(self) -> None:
        #   Track the status of a service then plot it
        with ErrorHandler(mode=ErrorMode.NoTrace):
            cur = self.con.cursor()
            old_date_query = """
                SELECT MIN(date) 
                FROM track
                WHERE service = ?
            """
            raw_solved_query = f"""
                SELECT COUNT(cve_id) AS solved_d, date
                FROM track
                WHERE status = "SOLVED"
                AND service = "{self.service_name}"
                GROUP BY date
            """
            unsolved_query = f"""
                SELECT COUNT(cve_id) AS unsolved_d, date        
                FROM track
                WHERE status = "UNSOLVED"
                AND service = "{self.service_name}"
                GROUP BY date
            """
            old_date = cur.execute(old_date_query, [self.service_name]).fetchone()
            raw_solved_df = pd.read_sql_query(raw_solved_query, con=self.con)
            base_df = pd.DataFrame({
                "solved_d": [0],
                "date": [old_date]
            })
            solved_df = pd.concat([base_df, raw_solved_df])
            solved_df.reset_index(drop=True, inplace=True)
            unsolved_df = pd.read_sql_query(unsolved_query, con=self.con)

            #   Start plotting
            fig, ax = plt.subplots(figsize=(self.width, self.height))
            solved_df.plot(rot=0, y="solved_d", x="date", ax=ax)
            unsolved_df.plot(rot=0, y="unsolved_d", x="date", ax=ax)
            ax.set_title(f"Track Resolve Status of {self.service_name} on {get_cur_date()}",
                        fontsize=18, fontweight="bold")
            ax.tick_params(axis="both", which="major", labelsize=self.labelsize)
            ax.set_xlabel(xlabel="Date", fontsize=self.fontsize,
                        fontweight=self.fontweight)
            ax.set_ylabel(ylabel="Number", fontsize=self.fontsize,
                        fontweight=self.fontweight)
            ax.legend(["Unsolved", "Solved"], prop={"size": self.labelsize})
            fig.savefig(os.path.join(self.imagedir,
                        f"track_{get_cur_date()}_{self.service_name}.png"))

    def plot_by_latest(self):
        #   Plot the latest scanned CVEs from a service
        with ErrorHandler(mode=ErrorMode.NoTrace):
            latest_cve_query = f"""
                SELECT t.cve_id, c.score, c.exploitability_score, c.impact_score, COUNT(r.url) AS sources 
                FROM track t, cve c, reference r
                WHERE date = (
                    SELECT MAX(date)
                    FROM track
                )
                AND t.service = "{self.service_name}"
                AND t.cve_id = c.cve_id
                AND c.cve_id = r.cve_id
                AND t.status = "UNSOLVED"
                GROUP BY r.cve_id
            """
            latest_df = pd.read_sql_query(latest_cve_query, con=self.con)

            #   Start plotting
            fig, ax = plt.subplots(figsize=(16, 10))
            latest_df.plot(kind="bar", rot=0, x="cve_id", width=0.03, ax=ax)
            ax.set_ylim([0, 10])
            ax.set_title(
                f"Latest Scanned CVEs from {self.service_name} on {get_cur_date()}", fontsize=18, fontweight="bold")
            ax.tick_params(axis="both", which="major", labelsize=16)
            ax.set_xlabel(xlabel="CVE ID", fontsize=18, fontweight="bold")
            ax.set_ylabel(ylabel="Score", fontsize=18, fontweight="bold")
            ax.legend(prop={"size": 16})
            fig.savefig(os.path.join(self.imagedir,
                        f"latest_{get_cur_date()}_{self.service_name}.png"))
